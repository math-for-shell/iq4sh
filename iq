#!/bin/sh
# - IQ4sh or 'iq' is a precision decimal calculator for the shell

# Copyright Gilbert Ashley 9 January 2022
# Contact: OldGringo9876@gmx.de  Subject-line: IQ4sh

# Operations supported: addition, subtraction, multiplication, division, modulo, 
# exponentiation(integer-only) and numeric comparison of decimal values.

# To see the iq help page, run './iq -h' (or 'iq -h' if 'iq' is in your PATH)
# See the bottom of the file for full instructions on using iq.

# add - remove checks for mal-formed inputs from user
# mul - accept only 'x' as the operator -un-needed options
# div - re-worked handling of special cases and %,r operations
# bnpow - support negative bases and exponents
# new functions is_val and is_op used by execution block
# new execution block - handles all inputs when iq is run as a program
# reworked help to reflect changes, added more in-code comments again
# mul - streamlined method slightly


# disable some style checks and un-helpful suggestions
# shellcheck disable=SC2086,SC2004,SC2295,SC2154,SC2026,SC2123

iqversion=1.71

# default precision if scale is not specified, otherwise 
# division could sometimes proceed endlessly
defprec=${defprec:-5}

# tsst  - numeric comparison of decimal numbers using shell 'test' syntax
# depends on: 'cmp3w'
tsst_help(){
echo "  'tsst' usage: 'tsst num1 operator num2' operators: -lt -le -eq -ge -gt -ne
  tsst returns true or false condition, for use like shell 'test' or '[' 
  Example: 'tsst 4.22 -lt 6.3 && echo less' or 'tsst 4.22 -lt 6.3 ; echo \$?'"
}
tsst() { case $1 in ''|-h|-s*) tsst_help >&2 ; return 1 ;;esac
    tstret=$( cmp3w $1 $3 )
    case $2 in
        '-lt') [ "$tstret" = '<' ] ; return $? ;;
        '-le')  case $tstret in '<'|'=') return 0 ;; *) return 1 ;;esac ;;
        '-eq') [ "$tstret" = '=' ] ; return $? ;;
        '-ge')  case $tstret in '>'|'=') return 0 ;; *) return 1 ;;esac ;;
        '-gt') [ "$tstret" = '>' ] ; return $? ;;
        '-ne')  case $tstret in '=') return 1 ;; *) return 0 ;;esac ;;
    esac
} ## tsst
# tstret=

# 'cmp3w' compares 2 decimal numbers relatively, returning: '<', '=' or '>'
# depends on: /bin/sh
# The input-handling routine used here, is similar to that used in most other
# functions so it's commented here, and later only where it differs from here
cmp3w_help() { 
echo "  'cmp3w' usage: 'cmp3w num1 num2' 
  Example: 'cmp3w -234.57 -234.55' returns: '<'"
}
cmp3w() { case $1 in ''|-h|-s*) cmp3w_help >&2  ; return 1 ;;esac
    # separate and store the signs of both inputs
    case $1 in '-'*) c1sign='-' c1=${1#*-} ;; *) c1sign='+' c1=${1#*+} ;;esac
    case $2 in '-'*) c2sign='-' c2=${2#*-} ;; *) c2sign='+' c2=${2#*+} ;;esac
    # separate the integer and fractional parts
    case $c1 in *.*) c1i=${c1%.*} c1f=${c1#*.} ;; *) c1i=$c1 c1f=0  ;;esac
    case $c2 in *.*) c2i=${c2%.*} c2f=${c2#*.} ;; *) c2i=$c2 c2f=0 ;;esac
    # default zeros
    c1i=${c1i:-0} c1f=${c1f:-0} c2i=${c2i:-0} c2f=${c2f:-0}
    # pad both integers and fractions until equal in length
    while [ ${#c1i} -gt ${#c2i} ] ;do c2i='0'$c2i ;done 
    while [ ${#c2i} -gt ${#c1i} ] ;do c1i='0'$c1i ;done
    while [ ${#c1f} -gt ${#c2f} ] ;do c2f=$c2f'0' ;done 
    while [ ${#c2f} -gt ${#c1f} ] ;do c1f=$c1f'0' ;done
    # recombine each number into an equi-length integer string
    c1=$c1i$c1f c2=$c2i$c2f
    # if both inputs are >18-digits, work left-to-right in chunks of 18 chars
    while [ ${#c1} -gt 18 ] ;do
        cmpmsk1=${c1#*??????????????????} cmp1=${c1%"${cmpmsk1}"*} 
        cmpmsk2=${c2#*??????????????????} cmp2=${c2%"${cmpmsk2}"*}
        c1=$cmpmsk1 c2=$cmpmsk2
        # if both chunks are only zeros, skip to next chunk
        case $cmp1$cmp2 in *[!0]*) : ;; *) continue ;; esac
        # Check (signed) for '>' or '<' condition. Prepended 1's protect any embedded zeros
        [ $c1sign'1'"$cmp1" -gt $c2sign'1'"$cmp2" ] && { echo '>' ; return ;}
        [ $c1sign'1'"$cmp1" -lt $c2sign'1'"$cmp2" ] && { echo '<' ; return ;}
    done
    # Do the same for inputs under 19 digits, or last chunks from above
    case $c1$c2 in *[!0]*) : ;; *) echo '=' ; return ;; esac
    [ $c1sign'1'"$c1" -gt $c2sign'1'"$c2" ] && { echo '>' ; return ;}
    [ $c1sign'1'"$c1" -lt $c2sign'1'"$c2" ] && { echo '<' ; return ;}
    # if we get here the numbers are definitely equal
    echo '='
} ## cmp3w
#c1= c1i= c1f= c1sign= c2= c2i= c2f= c2sign= cmp1= cmp2= cmpmsk1= cmpmsk2= 

# add - add and/or subtract 2 or more decimal numbers
# depends on: 'cmp3w'
# adds or subtracts large numbers in chunks of 16 digits
add_help() {
echo "  'add' usage: 'add [-s?] num1 (+-) num2' 
  Example: 'add -s4 2.340876 + 1827.749048' = 1830.0899
  If no scale is specified, 'add' returns the full result."
}
add(){ aprec=off 
    case $1 in -s*) aprec=${1#*-s} ; shift ;; ''|-h) add_help >&2 ; return 1 ;; esac
    # initial sum is the first input
    r_add=$1 ; shift
    while [ "$1" ] ;do
        # if next input is operator, record it and shift to next input
        case $1 in +|-) aoprtr=$1 ; shift ;; *'.') echo "->add: Invalid input '$1'" >&2 ; return 1 ;; esac
        # get the second/next input and then do the input handling for both numbers
        case $1 in '') echo "->add: Missing input after operator '$aoprtr'" ; return 1 ;; *) anxt=$1 ;; esac
        # get the second/next input and then do the input handling for both numbers
        # separate any signs from the numbers and establish positive/negative state of result
        case $r_add in -*) rsign='-' r_add=${r_add#*-} ;; *) rsign='+' r_add=${r_add#*+} ;; esac
        case $anxt in -*) anxtsign='-' anxt=${anxt#*-} ;; *) anxtsign='+' anxt=${anxt#*+} ;; esac
        # separate the integer and fraction parts of both numbers -dont allow single or trailing dot
        case $r_add in *'.') echo "->add: Invalid input '$r_add'" >&2 ; return 1 ;; .*) rint=0 rfrac=${r_add#*.} ;; 
            *.*) rint=${r_add%.*} rfrac=${r_add#*.} ;; *) rint=$r_add rfrac=0 ;;esac
        case $anxt in  *'.') echo "->add: Invalid input '$anxt'" >&2 ; return 1 ;; .*) nint=0 nfrac=${anxt#*.} ;;
            *.*) nint=${anxt%.*} nfrac=${anxt#*.} ;; *) nint=$anxt nfrac=0 ;;esac
        # pad fractions till equal-length = 'write one number above the other, aligning the decimal points'
        while [ ${#rfrac} -lt ${#nfrac} ] ;do rfrac=$rfrac'0' ;done
        while [ ${#nfrac} -lt ${#rfrac} ] ;do nfrac=$nfrac'0' ;done
        # get the size of the fraction after padding them
        afsize=${#rfrac}
        # front-pad integers till equal-length for accurate chunking.
        # This also means we are sending pre-formatted numbers to cmp3w
        while [ ${#rint} -lt ${#nint} ] ;do rint='0'$rint ;done
        while [ ${#nint} -lt ${#rint} ] ;do nint='0'$nint ;done
        # when an operator is used we need this step to handle these forms: 'a + -b', 'a - -b', 'a - +b'
        [ -n "$aoprtr" ] && case ${aoprtr}${anxtsign} in '++'|'--') anxtsign='+' ;; '+-'|'-+') anxtsign='-' ;;esac 
        # put _larger_ number first for an easier work-flow -we've pre-padded so this is fast
        case $( cmp3w '1'$rint$rfrac '1'$nint$nfrac ) in '<')  swpint=$rint swpfrac=$rfrac swpsign=$rsign 
            rint=$nint rfrac=$nfrac rsign=$anxtsign nint=$swpint nfrac=$swpfrac anxtsign=$swpsign ;;esac
        # the sign of the result is the sign of the greater number(absolute value)
        # find the real operation we will be performing
        case ${rsign}${anxtsign} in '+-'|'-+') aoprtr='-' ;; *) aoprtr='+' ;;esac
        
        # assign recombined values to working variables A and B, and recycle r_add
        A=$rint$rfrac B=$nint$nfrac r_add='' 
        case $aoprtr in 
        '+')    adsub=0 acry=0
            # work from right to left, just like doing it on paper
            # protect embedded 0's in chunks with leading 1's. This also
            # allows to easily check if a carry is triggered
            while [ ${#A} -gt 16 ] ;do
                admsk1=${A%????????????????*} Achnk='1'${A#*$admsk1} A=$admsk1    
                admsk2=${B%????????????????*} Bchnk='1'${B#*$admsk2} B=$admsk2
                adsub=$(( $Achnk + $Bchnk + $acry )) 
                # If result begins with '3', there was a carry
                case $adsub in 3*) acry=1 ;; *) acry=0 ;;esac
                # remove the extra leading digit which is a '2' or '3'
                r_add=${adsub#*?}$r_add 
            done
            # same for any last chunk or the original which was <17 digits
            if [ -n "$A" ] ; then
                Achnk='1'$A Bchnk='1'$B  adsub=$(( $Achnk + $Bchnk + $acry ))
                # if there was a carry(a leading 3), replace with '1'
                # otherwise we simply remove the leading '2'
                case $adsub in 3*) r_add='1'${adsub#*?}$r_add acry=0 ;; 
                    *) r_add=${adsub#*?}$r_add ;;
                esac
            fi
        ;;
        '-')
            if [ ${#A} -lt 19 ] ;then
                # if numbers are <19 digits, do short method
                # prepend a dummy '1' avoids depadding
                A='1'$A B='1'$B
                r_add=$(( $A - $B )) 
            else
                # subtract by chunks - first char of result is a signal for borrow
                adsub=0  acry=0
                # For subtraction, prepending 1's doesn't help us. We'd have to detect
                # the length of the result for borrow detection and decide whether
                # or not to remove the first digit of result. Using leading '3' and '1'
                # makes detection easy and the leading digit of result is always removed
                while [ ${#A} -ge 17 ] ;do
                    admsk1=${A%?????????????????*}  Achnk='3'${A#*$admsk1}  A=$admsk1
                    admsk2=${B%?????????????????*}  Bchnk='1'${B#*$admsk2}  B=$admsk2
                    [ "$acry" = 1 ] && { Bchnk=$(( $Bchnk + 1 ))  acry=0 ;}
                    adsub=$(( $Achnk - $Bchnk ))
                    # prepending 3 and 1 to the numbers above provides
                    # a borrow/carry signal in the first digit from the result
                    # if adsub begins with '2' no carrow/borrow was triggered
                    case $adsub in 1*) acry=1 ;;esac
                    # the leading 3/1 combination assures a constant result length
                    # so we don't have ask whether the result is shorter
                    adsub=${adsub#*?}
                    r_add=${adsub}$r_add
                done
                if [ -n "$A" ] ; then
                    # remove any left-over _extra_ leading zeros from both numbers
                    # we may have a carry, so we can't simply prepend 1's here
                    while : ; do case $A in '0'?*) A=${A#*?} ;; *) break ;;esac ;done
                    while : ; do case $B in '0'?*) B=${B#*?} ;; *) break ;;esac ;done
                    # just as above, use carry instead of borrow
                    [ "$acry" = 1 ] && { B=$(( $B + 1 ))  acry=0 ;}
                    adsub=$(( $A - $B ))
                    r_add=${adsub}$r_add
                fi
            fi
        esac
        # remove any neg sign -we already know what sign the result is
        r_add=${r_add#*-}
        # if result is shorter than frac size, front-pad till equi-length
        while [ ${#r_add} -lt $afsize ] ;do r_add='0'$r_add ;done   
        # separate the fraction from the result, working right-to-left
        adcnt=0   ofrac=''
        while [ $adcnt -lt $afsize ] ;do 
            admsk1=${r_add%?*} ofrac=${r_add#$admsk1*}$ofrac r_add=$admsk1 adcnt=$((adcnt+1))
        done
        # trim leading zeros, # dont leave '-' sign if answer is 0
        while : ;do case $r_add in '0'?*) r_add=${r_add#*?} ;; *) break ;;esac ;done
        # if answer is zero, make sure sign is not '-'
        case $r_add$ofrac in *[!0]*) : ;; *) rsign= ;;esac
        # add the sign unless it's '+'
        r_add=${rsign#*+}${r_add:-0}'.'${ofrac:-0}
        # sanitize these variables for the next round, if any
        aoprtr='' anxtsign='' rsign=''
        shift 1
    done
    # truncate the result, if requested
    case $aprec in 0) echo ${r_add%.*} ;; off) echo $r_add ;; *) ofrac=${r_add#*.} ;
            while [ ${#ofrac} -gt $aprec ] ;do ofrac=${ofrac%?*} ;done
            echo ${r_add%.*}'.'$ofrac ;;
    esac
    # sanitize exit variables
    aprec='' r_add='' ofrac=''
} ## add
# aoprtr= anxt= rsign= anxtsign= rint= rfrac= nint= nfrac= afsze= swpint= swpfrac= swpsign= # aprec= r_add=
# A= B= adsub= acry= admsk1= Achnk= admsk2= Bchnk= adcnt= ofrac=

# mul - multiply 2 or more decimal numbers
# depends on 'cmp3w' and 'add'
# for large numbers uses a chunking method which multiplies in chunks of 9 digits
mul_help() {
echo "  'mul' usage: 'mul [-s?] num1 x num2'
  The small 'x' is the only valid operator for mul.
  Example: 'mul -s4 2.340876445 x 1827.749048475' = 4278.5346
  If no scale is specified, 'mul' returns the full result."
}
mul(){ mprec=off
    case $1 in -s*) mprec=${1#*-s} ; shift ;; ''|-h) mul_help >&2 ; return 1 ;;esac
    [ "$mprec" = 0 ] || defzero='.0'
    case $2 in '') mul_help >&2 ; return 1 ;;esac
    r_mul=$1 ; shift
    while [ "$1" ] ;do  
        case $1 in x) shift ;; *'.') echo "->mul: Invalid input '$1'" >&2 ; return 1 ;; esac
        case $1 in '') echo "->mul: Missing second input after operator x" ; return 1 ;; *) mnxt=$1 ;; esac
        case $r_mul in -*) mrsign='-' r_mul=${r_mul#*-} ;; *) mrsign='+' r_mul=${r_mul#*+} ;;esac
        case $mnxt in -*) mnxtsign='-' mnxt=${mnxt#*-} ;; *) mnxtsign='+' mnxt=${mnxt#*+} ;;esac
        case $r_mul in  *'.') echo "->mul: Invalid input '$r_mul'" >&2 ; return 1 ;; .*) mrint=0 mrfrac=${r_mul#*.} ;;
                *.*) mrint=${r_mul%.*} mrfrac=${r_mul#*.} ;; *) mrint=$r_mul mrfrac=0 ;;esac
        case $mnxt in  *'.') echo "->mul: Invalid input '$mnxt'" >&2 ; return 1 ;; .*) mnint=0 mnfrac=${mnxt#*.} ;;
                *.*) mnint=${mnxt%.*} mnfrac=${mnxt#*.} ;; *) mnint=$mnxt mnfrac=0 ;;esac
        # remove all leading zeros from integers
        while : ;do case $mrint in '0'*) mrint=${mrint#*?} ;; *) break ;;esac ;done
        while : ;do case $mnint in '0'*) mnint=${mnint#*?} ;; *) break ;;esac ;done 
        # also remove all trailing zeros from fractions
        while : ;do case $mrfrac in *'0') mrfrac=${mrfrac%?*} ;; *) break ;;esac ;done
        while : ;do case $mnfrac in *'0') mnfrac=${mnfrac%?*} ;; *) break ;;esac ;done
        
        # combine numbers
        Am=$mrint$mrfrac Bm=$mnint$mnfrac  fastm=0
        if [ $(( ${#Am} + ${#Bm} )) -lt 19 ] ; then
            # get the full size of the result fraction
            mfsize=$(( ${#mrfrac} + ${#mnfrac} ))
            # if the integer portion is 0(null), also remove leading zeros from fractions
            [ -z $mrint ] && while : ;do case $mrfrac in '0'*) mrfrac=${mrfrac#*?} ;; *) break ;;esac ;done
            [ -z $mnint ] && while : ;do case $mnfrac in '0'*) mnfrac=${mnfrac#*?} ;; *) break ;;esac ;done
            fastm=1
        else
            # make sure _longer_ number is first for easier chunking
            if [ ${#Am} -lt ${#Bm} ] ; then
                swpint=$mrint swpfrac=$mrfrac swpsign=$mrsign mrint=$mnint mrfrac=$mnfrac mrsign=$mnxtsign 
                mnint=$swpint mnfrac=$swpfrac mnxtsign=$swpsign 
            fi
            mfsize=$(( ${#mrfrac} + ${#mnfrac} ))
        fi
        # determine the sign of result
        case ${mrsign}${mnxtsign} in '++'|'--') R_msign='+' ;; '+-'|'-+') R_msign='-' ;;esac
        
        # recombine numbers and reuse original input r_mul
        Am=$mrint$mrfrac Bm=$mnint$mnfrac  r_mul=0
        # if either number was equal to 0(by now null), return 0.0, since we
        # can be certain that everything before and after will always equal zero.
        # if either or both is '1', setup to skip calculation below
        case $Am in '') echo 0$defzero ; return ;; 1) r_mul=$Bm ;;esac
        case $Bm in '') echo 0$defzero ; return ;; 1) r_mul=$Am ;; esac
        
        if [ "$Am$Bm" = "11" ] ; then
            r_mul=1
        elif [ "$r_mul" = 0 ] ; then
        
        case $fastm in 1) r_mul=$(( $Am * $Bm )) ;;
          # long numbers get chunked
          *)  mchnksize=9 ocol=
            while [ -n "$Am" ] ;do
                # if smaller than chunk size, use all, otherwise take a bite
                if [ ${#Am} -lt $mchnksize ] ; then
                    Amchnk=$Am Am='' 
                else
                    mumsk1=${Am%?????????*} Amchnk=${Am#*$mumsk1} Am=$mumsk1
                fi
                
                while : ;do case $Amchnk in '0'*) Amchnk=${Amchnk#*?} ;; *) break ;;esac ;done # depad
                if [ -n "$Amchnk" ] ; then
                    Bm=$mnint$mnfrac mtmp=0 icol= # reset
                    
                    while [ -n "$Bm" ] ;do 
                        if [ ${#Bm} -lt $mchnksize ] ; then
                            Bmchnk=$Bm Bm=''
                        else
                            mumsk2=${Bm%?????????*} Bmchnk=${Bm#*$mumsk2} Bm=$mumsk2
                        fi
                        while : ;do case $Bmchnk in '0'*) Bmchnk=${Bmchnk#*?} ;; *) break ;;esac ;done # depad
                        if [ -n "$Bmchnk" ] ; then
                            mchnk=''
                            case $Amchnk'_'$Bmchnk in 
                                1_1) mchnk=1 ;; 1_*) mchnk=$Bmchnk ;; *_1) mchnk=$Amchnk ;;
                                *)  mchnk=$(( $Amchnk * $Bmchnk )) ;;
                            esac
                            mtmp=$( add -s0 $mtmp  $mchnk$icol )
                        fi
                        icol=$icol'000000000'
                    done
                    # add the temporary result to total
                    case $r_mul in 
                            0) r_mul=$mtmp$ocol ;;
                            *) r_mul=$( add -s0 $r_mul $mtmp$ocol ) ;;
                    esac
                fi
                ocol=$ocol'000000000' icol=
            done
        ;;esac
        
        fi
        # process ouput from this round the same way as with 'add'
        r_mul=${r_mul#*-}
        while [ ${#r_mul} -lt $mfsize ] ;do r_mul='0'$r_mul ;done
        icol=''   mtmp=0  mcnt=0   mfrac=''
        # separate frac -right to left
        while [ $mcnt -lt $mfsize ] ;do 
            mumsk1=${r_mul%?*} mfrac=${r_mul#*$mumsk1}$mfrac r_mul=$mumsk1 mcnt=$((mcnt+1))
        done
        # depad both sides of result
        while : ;do case $r_mul in '0'?*) r_mul=${r_mul#*?} ;; *) break ;;esac ;done # trim _extra_ leading zeros on int
        while : ;do case $mfrac in *?'0') mfrac=${mfrac%?*} ;; *) break ;;esac ;done # trim _extra_ trailing zeros on frac
        case ${r_mul:-0}'.'${mfrac:-0} in 0.0) R_msign= ;;esac
        r_mul=${R_msign#*+}${r_mul:-0}'.'${mfrac:-0}
        R_msign=''
        shift
    done
    # format output as needed, and sanitize variables
    case $mprec in 0) echo ${r_mul%.*} ;; off) echo $r_mul ;;
        *) mfrac=${r_mul#*.} ; while [ ${#mfrac} -gt $mprec ] ;do mfrac=${mfrac%?*} ;done
            echo ${r_mul%.*}'.'$mfrac ;;
    esac
    mfrac='' mprec='' r_mul=''
} ## mul
# mprec= r_mul= mnxt= mrsign= mnxtsign= mrint= mrfrac= mnint= mnfrac= mfsize= ^
# swpint= swpfrac= swpsign= fastm= R_msign= Am= Bm= mchnk=

# div - perform division '/' or modulo '%' on 2 decimal numbers
# depends on: 'cmp3w' 'tsst' 'add' 'mul'
# this a one-shot function which, unlike 'add' and 'mul', doesn't accept a series of inputs
div_help() { 
echo "  'div' requires 3 inputs: 'div [-s?] num1 (/,%,r) num2'
  Examples: 'div -s8 3.52 / 1.4' or 'div -s8 3.52 % 1.4' or 'div -s8 3.52 r 1.4'
  If no scale is given, a default value($defprec) will be used for division."
}
div() { scale_div=$defprec 
    case $1 in -s*) scale_div=${1#*-s} ; shift ;; ''|-h) div_help >&2 ; return 1 ;;esac
    [ "$scale_div" = 0 ] || defzero='.0'
    case $3 in '') div_help >&2 ; return 1 ;;esac
    M=$1 oprtr=$2 D=$3
    case $oprtr in '/'|'%'|'r') : ;; *) echo "->div: Invalid operator '$oprtr'" >&2 ; return 1 ;;esac
    case $M in '-'*) M_sign='-' M=${M#*-} ;; *) M_sign='+' M=${M#*+} ;;esac
    case $D in '-'*) D_sign='-' D=${D#*-} ;; *) D_sign='+' D=${D#*+} ;;esac
    case "${M_sign}${D_sign}" in '++'|'--') Q_sign='+' ;; '+-'|'-+') Q_sign='-' ;;esac
    case $M in  *'.') echo "->div: Invalid input '$M'" >&2 ; return 1 ;; .?*) M_int='' M_frac=${M#*.} ;;
        *?.?*) M_int=${M%.*} M_frac=${M#*.} ;; *) M_int=${M} M_frac='' ;;esac
    case $D in  *'.') echo "->div: Invalid input '$D'" >&2 ; return 1 ;; .?*) D_int='' D_frac=${D#*.} ;;
        *?.?*) D_int=${D%.*} D_frac=${D#*.} ;; *) D_int=${D} D_frac='' ;;esac
    # remove all leading zeros from integers
    while : ;do case $M_int in '0'*) M_int=${M_int#*?} ;; *) break ;;esac ;done
    while : ;do case $D_int in '0'*) D_int=${D_int#*?} ;; *) break ;;esac ;done
    # remove any trailing zeros from fractions
    while : ;do case $M_frac in *'0') M_frac=${M_frac%?*} ;; *) break ;;esac ;done
    while : ;do case $D_frac in *'0') D_frac=${D_frac%?*} ;; *) break ;;esac ;done
    # save sanitized fractions for comparison below
    sane_mfrac=${M_frac:-0}     sane_dfrac=${D_frac:-0}
    # calculate padding/offset.
    me=0 de=0
    case $M_int in 
        '') while : ;do case $M_frac in '0'*) M_frac=${M_frac#*?} me=$((me-1)) ;; *) break ;;esac ;done ;; 
        *) me=${#M_int} ;;
    esac
    case $D_int in 
        '') while : ;do case $D_frac in '0'*) D_frac=${D_frac#*?} de=$((de-1)) ;; *) break ;;esac ;done ;; 
        *) de=${#D_int} ;;
    esac
    punch=$(( me - de ))
    
    # combine numbers
    mod=$M_int$M_frac dvsr=$D_int$D_frac
    # test early for division by zero or easy answers
    case $dvsr in '') echo "->div: Division by zero" >&2 ; return 1 ;;esac
    # if mod is zero, the answer is '0'
    case $mod in '') echo 0$defzero ; return ;; esac
    
    # if D=+-1 return sanitized M, if inputs have same absolute value, answer is '+-1'
    case "${D_int:-0}"'.'"$sane_dfrac" in 1.0)
            case $oprtr in '/') Q_out=${Q_sign#*+}${M_int:-0}
                    [ "$scale_div" != 0 ] && Q_out=$Q_out'.'$sane_mfrac ;;
                '%') Q_out=${Q_sign#*+}${M_int:-0} ;;
                'r') Q_out=${Q_sign#*+}${M_int:-0}'r''0.'$sane_mfrac ;; 
            esac
            echo $Q_out ; return ;;
        "${M_int:-0}"'.'"$sane_mfrac") 
            case $oprtr in '/') Q_out=${Q_sign#*+}1$defzero ;;
                '%') Q_out=${Q_sign#*+}1$defzero ;;
                'r') Q_out=${Q_sign#*+}1'r''0.0' ;;
            esac
            echo $Q_out ; return ;;
    esac
    
    # pad both numbers to equal length
    while [ ${#mod} -lt ${#dvsr} ] ;do mod=$mod'0' ;done
    while [ ${#dvsr} -lt ${#mod} ] ;do dvsr=$dvsr'0' ;done
    
    # when punch is negative, it means that the answer is going to be a fraction,
    # and we may need to front-pad the result to restore leading zeros
    case $punch in -*) tsst $mod -ge $dvsr && punch=$((punch+1)) ;; esac
    
    Q_int=0
    # if numerator is greater than denominator, then answers' integer 'Q_int' must be calculated
    if tsst ${M_int:-0}'.'$sane_mfrac -gt ${D_int:-0}'.'$sane_dfrac ; then
        qcnt=0
        while [ $qcnt -lt $punch ] ; do qcnt=$((qcnt+1))
            # if dvsr has trailing zeros, shorten it instead of making mod longer
            case $dvsr in *?0) dvsr=${dvsr%?*} ;; *) mod=$mod'0' ;; esac
        done
        
        if [ ${#mod} -lt 19 ] ; then
            Q_int=$(( $mod / $dvsr )) 
            mod=$(( $mod % $dvsr ))
        else
            # this is division by subtraction using partitioning
            while : ;do
                case $mod in ?) divpad='' ;;
                    *)  seed=$(( ${#mod} - ${#dvsr} )) qcnt=0
                        while [ $qcnt -lt $seed ] ;do divpad=$divpad'0' qcnt=$((qcnt+1)) ;done
                        case $( cmp3w $dvsr$divpad $mod ) in '>') divpad=${divpad%?*} ;;esac
                    ;;
                esac
                last_intrm_P=$dvsr$divpad
                for fctr in 2 3 4 5 6 7 8 9 ;do
                    intrm_P=$( mul -s0 $fctr $dvsr$divpad )
                    case $( cmp3w  $intrm_P $mod ) in
                        '>') fctr=$(( $fctr - 1 )) intrm_P=$last_intrm_P ; break ;;
                        '=') break ;;esac
                    last_intrm_P=$intrm_P
                done
                tsst $mod -lt $dvsr && break
                intrm_Q=$fctr$divpad Q_int=$( add -s0 $Q_int $intrm_Q )
                mod=$( add -s0 $mod - $intrm_P ) divpad='' fctr=''
            done
        fi
    fi
    
    # early exit if operator is %/r
    case $oprtr in '%'|'r') 
        mod=$( mul ${Q_sign#*+}$Q_int ${D_sign#*+}${D_int:-0}'.'$sane_dfrac )
        mod=$( add ${M_sign#*+}${M_int:-0}'.'$sane_mfrac - $mod )
        [ "$Q_int" = 0 ] && Q_sign=''
        case $oprtr in '%') echo ${Q_sign#*+}$Q_int ;; 
            'r') echo ${Q_sign#*+}$Q_int'r'$mod ;; 
        esac
        return ;;
    esac
    # or if scale is zero
    case $scale_div in 0) [ "$Q_int" = 0 ] && echo $Q_int || echo ${Q_sign#*+}$Q_int ; return ;; esac
    
    # calculate fraction digit-by-digit
    Q_frac=''
    # for numbers <19 digits
    if [ ${#mod} -lt 18 ] && [ ${#dvsr} -lt 19 ] ;then
        while [ ${#mod} -lt 18 ] ;do
            [ "$mod" = 0 ] && break
            mod=$mod'0'
            if [ $mod -lt $dvsr ] ;then
                Q_frac=$Q_frac'0'
            else
                this_q=$(( $mod / $dvsr ))
                Q_frac=$Q_frac$this_q
                mod=$(( $mod % $dvsr ))
            fi
            [ ${#Q_frac} -eq ${scale_div} ] && break
        done
    fi
    # there may be partial results above which get finished below
    # calculate fraction using subtraction for long numbers
    while [ ${#Q_frac} -lt ${scale_div} ] ;do
        [ "$mod" = 0 ] && break
        mod=$mod'0'
        if tsst $mod -lt $dvsr ;then
            Q_frac=$Q_frac'0'
        else    qcnt=0
            while : ;do
                tsst $mod -lt $dvsr && break
                mod=$( add -s0 $mod - $dvsr ) 
                qcnt=$(( qcnt + 1 ))
            done
            Q_frac=$Q_frac$qcnt
        fi
    done
    # add leading zeros back to fraction where needed
    qcnt=0
    case $punch in -*)
        while [ $qcnt -lt ${punch#*-} ] ;do Q_frac='0'$Q_frac qcnt=$((qcnt+1)) ;done ;;
    esac
    # remove trailing zeros from fraction
    while : ; do  case $Q_frac in *?0) Q_frac=${Q_frac%?*} ;; *) break ;;esac ;done
    # we don't do any over-scaling above, so shortening frac here is pointless
    # but we might resort to over-scaling to overcome slow-to-increment #'s like 0.0000999999
    while [ ${#Q_frac} -gt ${scale_div} ] ;do Q_frac=${Q_frac%?*} ;done
    # format output as needed
    echo ${Q_sign#*+}$Q_int'.'${Q_frac:-0}
} ## div
# scale_div= M= oprtr= D= M_sign= D_sign= Q_sign= M_int= D_int= M_frac= D_frac= mod= dvsr= Q_fracsize= Q_int= Q_frac=
# qcnt= this_q= seed= divpad= last_intrm_P= fctr= intrm_P= punch= me= de= sane_mfrac= sane_dfrac=

# bnpow - raise an integer to an integer exponent
# a negative expoenent returns the inverse: 1/x^n
# bnpow mimicks the '**' operator of bash, zsh and ksh.
bnpow_help() {
echo "  bnpow usage: 'bnpow [-s?] num1 (^) num2', where both num1 and num2 are integers.
  num1 and num2 can be positive or negative. The scale option only applies when the
  exponent is negative -other wise it is ignored.
  Example: 'bnpow 2 ^ 128' = 340282366920938463463374607431768211456
  Example: 'bnpow -s10 2 ^ -16' = 0.0000152587
  "
}
bnpow() { bn_scale=$defprec
    case $1 in ''|-h) bnpow_help >&2 ; return 1 ;; -s*) bn_scale=${1#*-s} ; shift ;; esac
    #case $1 in *.*|-*) echo "->bnpow: only positive integer bases allowed" >&2 ; return ;;esac
    case $1 in *.*) echo "->bnpow: integer bases allowed" >&2 ; return ;;esac
    base_bnp=$1 ; shift
    case $1 in '^') shift ;;esac
    #case $1 in *.*|-*) echo "->bnpow: only positive integer exponents allowed" >&2 ; return 1 ;;esac
    case $1 in *.*) echo "->bnpow: only integer exponents allowed" >&2 ; return 1 ;;
        -*) exp_bnp=${1#-} ; bnp_neg='-' ;;
        *) exp_bnp=$1 ;;
    esac
    
    # special cases where base or exp equal 0 or 1
    case $base_bnp in 1) echo '1' ; return;; 0) echo '0' ; return;; esac
    case $exp_bnp in 1) echo $base_bnp ; return;; 0) echo '0' ; return;; esac
    # finally do the operation
    out_bnp=1
    while : ; do
        [ $((exp_bnp%2)) -ne 0 ] && out_bnp=$( mul -s0 $out_bnp $base_bnp )
        exp_bnp=$((exp_bnp/2))
        [ $exp_bnp -eq 0 ] && break
        base_bnp=$( mul -s0 $base_bnp $base_bnp )
    done
    case $bnp_neg in '-') out_bnp=$( div -s$bn_scale 1 / $out_bnp ) ;; esac
    echo $out_bnp
    bnp_neg=''
} ## bnpow
# bn_scale= base_bnp= exp_bnp= bnp_neg= out_bnp=

# as the name says, do nothing. For measuring startup latency, like this: 'time iq tue_nix
tue_nix() { : ;} ## tue_nix

## is_val and is_op are used by the execution block below
# but are not used by any of the main functions above
# check 15 conditions if an input is really a value
is_val() {
    case $1 in 
        *'.'|*'.'*'.'*) return 1 ;; # single dot or trailing dot, multiple dots
        [+-]) return 1 ;; # is just a sign or an operator
        *+*+*|*-*-*|*+*-*|*-*+*|*-|*+) return 1 ;; # multiple signs, mixed signs, trailing signs
        *[!+0-9.-]*) return 1 ;; # is not only digits, dots and signs
        [0-9]*-*|[0-9]*+*) return 1 ;; # signs embedded in digits
         # by now we're pretty sure you are a real, well-formed value
         # but notify me if you are not
        *) return 0 ;;
    esac
} ## is_val

# check 7 conditions if an input is an operator from our list
is_op(){ 
    case $1 in +|-|x|/|%|r|'^') return 0 ;; esac
    # behaviour of '^' inside character classes varies between shells.
    return 1
} ## is_op

# the general help for iq
iqhelp() {
echo "      IQ4sh/iq - Version:$iqversion - Copyright 2021 Gilbert Ashley
    
    Precision decimal calculator for the shell or for use in shell scripts.
    Available functions and their operators: add(+-) mul(x) div(/%r) bnpow(^)
    Utility functions/operators: tsst(-lt,-le,-eq,-ge,-gt,-ne) cmp3w(none)
    
    When running 'iq' from the command-line all functions require this format:
    'function-name number1 operator number2' like: 'add 2.47 + 3.24'
    
    'add', 'mul' and 'div' accept a scale option: '-sX', where X is desired scale.
    The scaling option '-s?', when used, should be the first parameter: 'add -s? ..'
    Used without scaling, 'add' and 'mul' output the full precision, untruncated.
    Using '-s0' with 'add', 'mul' and 'div' will truncate answers to integer ouput.
    
    'tsst', 'cmp3w', 'is_val' and 'is_op' do not accept a scaling option.
    'bnpow' accepts the '-sX' option, but it only applies when exponents are negative.
    
    To see specific help for a function, call it with the '-h' option: 'add -h',
    or with no argument: 'add '. An example of the usage line for 'add':
    'add' usage: 'add [-s?] num1 (+-) num2'
    Items in '[]' are optional. One of any operators in '()' is required. 
    Operators and values must be space-separated: 'add 2 + 3', not: 'add 2+3'
    
    iq allows input numbers of ~any length and answers of ~any length.
    Understandably, with very long numbers, you may wait longer for an answer.
    With inputs or answers longer than 50 digits, have a bit of patience. 
    "
}

# Execution block starts here
# If being used as a command-line calculator, execution starts here.
# If iq has been properly 'sourced' into the shell or script, this is ignored
if [ "$src" != "1" ] ; then
    # we don't get here if this file has been sourced
    # since we are going to do '$cmd "$@"' below, we make sure that only our functions
    # can be called, by eliminating the PATH and catching any absolute/relative paths
    PATH=
    # prioritize a few friendly, evil or time-sensitive functions
    case $1 in tue_nix) exit 0 ;; # people really in-the-know get priority here
        ''|-h|--help|iqhelp) iqhelp >&2 ; exit ;; # seekers,
        */*) echo " $0: Improper or dangerous input(a path): '$1'"  ; exit 1 ;; # hackers, cats
        is_val|is_op) $1 $2 ; exit $? ;; # climbers and scripters
    esac
    
    # since we are being strict, we really should uncomment this next line:
    ## case $USER in admin|root|cat) echo "--> $0: Root by any other name is still root" ; exit 1 ;; esac
    # But, we won't. For sure, admin has read this code, root...maybe, cat wrote the code.
    # They have all read the code and docs, they'll know that this fron-end should refuse all misuse or abuse of iq.
    # And with this front-end, iq should never return incorrect answers or strange-looking errors from the math unit,
    # because we also check to make sure the function names, values and operators are valid and appropriate to each other
    
    scaletmp=''
    case $1 in
        cmp3w)  case $2 in ''|-h) cmp3w_help >&2 ; exit 1 ;; esac
            [ -z $3 ] && { echo "--> cmp3w: Too few arguments" ; cmp3w_help >&2 ; exit 1 ;}
            [ -n "$4" ] && { echo "--> cmp3w: Too many arguments" ; cmp3w_help >&2 ; exit 1 ;}
            is_val $2 || { echo " ->cmp3w: Non-numeric input: $3" >&2 ; exit 1 ;}
            is_val $3 || { echo " ->cmp3w: Non-numeric input: $3" >&2 ; exit 1 ;}
            cmd=$1 ; shift 
        ;;
        tsst) case $2 in ''|-h) tsst_help >&2 ; exit 1 ;; esac
            [ -z $4 ] && { echo "--> tsst: Too few arguments" ; tsst_help >&2 ; exit 1 ;}
            [ -n "$5" ] && { echo "--> tsst: Too many arguments" ; tsst_help >&2 ; exit 1 ;}
            is_val $2 ||{ echo "->tsst: Non-numeric input: $2" >&2 ; exit 1 ;}
            case $3 in -lt|-le|-eq|-ge|-gt|-ne) : ;; 
                *) echo "->tsst: Non-valid comparison operator: $3" ; tsst_help >&2 ; exit 1 ;; 
            esac
            is_val $4 || { echo "->tsst: Non-numeric input: $4" >&2 ; exit 1 ;}
            cmd=$1 ; shift 
        ;;
        add|mul|div|bnpow) 
            cmd=$1
            case $2 in ''|-h) $1_help ; exit 0 ;; 
                -s) echo "--> $cmd: Missing scale/precision value to -s" >&2 ; exit 1 ;;
                -s[!0-9]) echo "--> $cmd: Non-digit argument to -s: '${2#*-s}'" ; exit 1 ;;
                -s*) scaletmp=$2 ; shift 2 ;; 
                *) shift ;; 
            esac
            # for uniform checks, always require an operator - exactly 3 inputs (after scale, if present
            [ -z $3 ] && { echo "-->$cmd: 3 space-separated inputs required 'num1 operator num2'" ; exit ;}
            [ -n "$4" ] && { echo "--> $cmd: Too many arguments" ; exit 1 ;} # too many arguments
            # check first number
            is_val $1 || { echo "-->$cmd: Non-numeric or mal-formed input: $1" >&2 ; exit 1 ;}
            # if operator is not at all in our list bail out -yes we'll look again below
            is_op $2 || { echo "-->$cmd: Non-operator input: $2" >&2 ; exit 1 ;}
            # check seconf number
            is_val $3 || { echo "-->$cmd: Non-numeric or mal-formed input: $3" >&2 ; exit 1 ;} # check second number
            # we still have to verify that the operator is _appropriate_ to the function being called
            case $cmd in
                add) case $2 in [!+-]) { echo "-->$cmd: Improper operator: '$2'  -try '+' or '-'" >&2 ; exit 1 ;} ;; esac ;;
                mul) case $2 in [!x]) { echo "-->$cmd: Improper operator: '$2'  -use 'x'" >&2 ; exit 1 ;} ;; esac ;;
                div) case $2 in [!/%r]) { echo "-->$cmd: Improper operator: '$2'  -try '/', '%' or 'r'" >&2 ; exit 1 ;} ;; esac ;;
                bnpow) case $2 in [!'^']) echo "-->$cmd: Improper operator: '$2'  -use '^'" >&2 ; exit 1 ;; esac ;;
            esac 
        ;;
        *)  echo "----> ${0##*/}: Invalid function name, exploit attempt or insult:----> $*" >&2 
            echo "----> Try one of these functions: iqhelp mul div bnpow tsst cmp3w is_val is_op" >&2 
            exit 1 
        ;;
    esac
    
    # this the only place iq ever 'executes' user input and should only
    # recognize its' own functions names. In the functions, command-sustitution is
    # used extensively, but only to run other iq/iq+ functions.
    # if you get to this point with _anything_ besides an iq function, share your secret.
    case $scaletmp in 
        '') $cmd "$@" ;; 
        *) $cmd "$scaletmp" "$@" ;; 
    esac
    # exit status so that: 'iq tsst 1111 -gt 1110 ; echo $?' works as expected
    # also for this 'if $(iq ...) ; then...  ' in scripts
    exit $?
fi
# end of code

# IQ4sh is written in minimal shell language, using no external programs, temporary files,
# shell extensions, arrays, eval, printf and no shell-builtins other than 'echo'.

###                           Directions for use                                ##
# iq is mainly designed to replace external calculators in other shell scripts, but
# it can also be used as a command-line calculator, or interactively from the shell.

# To use iq as a command-line calculator, make the file executable with: 'chmod +x iq'
# Then call the program like this: './iq add 23.43578 + 7234.45', if in the same directory as iq.
# Or, put iq in your path, then call it like a normal program: 'iq add 23.43578 + 7234.45'

# To use iq with a shell other than /bin/sh, change the first line 'shebang' 
# of the file : '#!/bin/sh' to use 'ksh', 'dash', 'zsh', 'bash' or 'posh'.
# If you find other shells which will run this script, please contact me.

# For interactive use within the shell or use in other shell scripts, making
# the file executable and changing the 'shebang' doesn't need to be done.
# For interactive use from the CLI, source the file like this: 'src=1 . ./iq' or '. iq' if iq is in PATH
# For use in shell scripts, put this near the top of the script: 'src=1 . ./iq' or '. iq' if iq is in PATH
# You can also temporarily add the location of 'iq' to your PATH and use it anywhere, like this:
# PATH=path_to_iq:$PATH iq add 23.43578 + 7234.45

# Running 'iq -h' will display a short general help message. For help with a specific
# function like 'add', the command 'iq add -h' will show the help for the 'add' function.
# For more detailed information, most functions have useful notes and comments in the 
# function header. Each functions' dependencies are also listed above each function.

### Error Messages 
# When running iq from the command-line, garbage inputs should always get thrown out.
# Otherwise, error-handling is left to the shell and the garbage-in=garbage-out.
# Here are some possible error messages from the shell itself, and their cause:
# iq[?]: shift: 1: bad number       #cause--> this shouldn't be happening and you should contact me
# iq: line ?: ? : arithmetic syntax error   #cause--> non-numeric characters in input
# iq: 546: ls: not found      # cause--> user/cat is mis-typing function names, or trying to exploit us
# iq: 82: [: Illegal number: +11/bin/ls00 # cause--> by now cat is furiously trying to get root
# iq: 142: arithmetic expression: division by zero: "1/bin/ls0+100000020+0" # cause--> user...
# iq: 142: arithmetic expression: expecting EOF: "1login0+1000050+0" # cause--> cat tries again... time for a nap
# this one actually comes from iq itself, since we were watching the cat the whole time:
